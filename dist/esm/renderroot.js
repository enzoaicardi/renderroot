class n{static current=new n;contexts=new Map;constructorCallbacks=[];disconnectedCallbacks=[]}function t(){return n.current}function o(){const t=(o,r)=>{const c=t,e=n.current.contexts.get(c);n.current.contexts.set(c,o);const s=r();return n.current.contexts.set(c,e),s};return t}function r(t){return n.current.contexts.get(t)}class c extends HTMLElement{disconnectedCallback;constructor(){super();const t=n.current.constructorCallbacks.shift(),o=n.current.disconnectedCallbacks.shift();if(t)for(const n of t)n(this);this.disconnectedCallback=()=>{if(o)for(const n of o)n(this)}}}const e=document.createElement("div");function s(t,o){const r=n.current;n.current=o||new n;const c=t(),s=e.cloneNode();return s.innerHTML=c,n.current=r,s.firstElementChild}function u(){const t=new Map(n.current.contexts);return o=>{const r=new n;return r.contexts=new Map(t),s(o,r)}}function i(){return[f(n.current.constructorCallbacks),f(n.current.disconnectedCallbacks)]}function f(n){return t=>{const o=n[n.length-1];o&&o.push(t)}}function a(t){return(...o)=>(n.current.constructorCallbacks.push([]),n.current.disconnectedCallbacks.push([]),"<render-root>"+t(...o)+"</render-root>")}customElements.define("render-root",c);export{o as createContext,s as createRoot,a as renderRoot,r as useContext,u as useInnerRoot,i as useLifeCycle,t as useRoot};
