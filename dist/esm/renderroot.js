class n{static current=new n;contexts=new Map;constructorCallbacks=[];disconnectedCallbacks=[]}function t(){return n.current}function o(){const t=(o,c)=>{const r=t,e=n.current.contexts.get(r);n.current.contexts.set(r,o);const s=c();return n.current.contexts.set(r,e),s};return t}function c(t){return n.current.contexts.get(t)}class r extends HTMLElement{disconnectedCallback;constructor(){super();const t=n.current.constructorCallbacks.shift(),o=n.current.disconnectedCallbacks.shift();if(t)for(const n of t)n(this);this.disconnectedCallback=()=>{if(o)for(const n of o)n(this)}}}const e=document.createElement("div");function s(t,o){const c=n.current;n.current=o||new n;const r=t();return e.innerHTML=r,n.current=c,e.firstElementChild}function u(){return[i(n.current.constructorCallbacks),i(n.current.disconnectedCallbacks)]}function i(n){return t=>{const o=n[n.length-1];o&&o.push(t)}}function f(t){return(...o)=>(n.current.constructorCallbacks.push([]),n.current.disconnectedCallbacks.push([]),"<render-root>"+t(...o)+"</render-root>")}customElements.define("render-root",r);export{o as createContext,s as createRoot,f as renderRoot,c as useContext,u as useLifeCycle,t as useRoot};
